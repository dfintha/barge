barge - A simple C/C++ build tool for simple projects
=====================================================

Overview
--------

This tool simplifies the development of small, simple Assembly/C/C++ projects,
by accomplishing tasks, that a makefile could. Right now, barge has the
following subcommands.

- init <repo>:
  Creates a new repository with a simple "Hello, world!" program. The repository
  contains an empty 'include' folder, an 'src' folder, a '.gitignore' file, and
  a 'barge.json' with the project name and the default settings. A git
  repository is also initialized in the directory.
- build:
  Builds the project using clang/clang++ and GNU make. Because the software
  uses GNU make for the build step, messages emitted by make may appear on the
  standard output alongside barge's output. The resulting executable resides in
  the 'bin' directory.
- rebuild:
  The same as subsequently invoking 'clean' and 'build'.
- run:
  Builds the project if needed, and runs the resulting executable.
- clean:
  Deletes the executable and object files, by removing both the 'bin' and 'obj'
  folders.
- lines:
  Prints the amount of source code lines to the standard output.

All the source and headers files are automatically added to the build under
their respective dedicated folders ('include' and 'src') and their subfolder.
As such, header files shall be added to the 'include' directory, and source
files shall be added to the 'src' directory. Also, the source files shall always
have their corresponding extension: '.s' for x86 assembly sources, '.c' for C
sources, and '.cpp' for C++ sources.

Build modes
-----------

The user can specify for the 'build', 'rebuild' and 'run' subcommands the
corresponding build mode by adding either the 'debug' or the 'release' argument
directly after them.

In debug build mode, the resulting executable is optimized for debugging in the
GNU debugger (gdb). In release mode, the executable is optimized for speed, and
also stripped, makint it smaller in size, but also near impossible to debug.

The configuration file
----------------------

As of now, the user can specify the settings to their project by changing
'barge.json' at the project root. This file contains the following data.

- name (string):
  The name of the project, and as such, the executable.
- c_standard (string):
  The C standard used for the C source files, in a format like "c99".
- cpp_standard (string):
  The C++ standard used for the C source files, in a format like "c++14".
- external_libraries (list of objects):
  The list of external libraries to link with. This is a list of objects, which
  are represented in one of the following ways.
  - Using pkg-build: { type: "pkgbuild", name: "<package name>" }
  - Manually specifying flags: { type: "manual", "cflags": "", ldflags: "-lm"}
- custom_cflags (string):
  Adds the flags specified here to the C source file compilation command line.
- custom_cxxflags (string):
  Adds the flags specified here to the C++ source file compilation command line.
- custom_ldflags (string):
  Adds the flags specified here to the executable linking command line.

This following simple example covers all the things specified above.

{
    "name": "example",
    "c_standard": "c99",
    "cpp_standard": "c++14",
    "external_libraries": [
        {
            "type": "pkgconfig",
            "name": "sdl"
        },
        {
            "type": "manual",
            "cflags": "",
            "ldflags": "-lpthread"
        },
    ],
    "custom_cflags": "-DNDEBUG",
    "custom_cxxflags": "-DNDEBUG",
    "custom_ldflags": "-ggdb"
}

Future improvements, TODOs
--------------------------

1. Subcommand to perform source code analysis via clang-tidy.
2. Add an option to set options for GNU make.
